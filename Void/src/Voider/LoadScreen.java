/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Voider;


import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JRootPane;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author john
 */
public final class LoadScreen extends javax.swing.JFrame {
    protected ProgressPane pane;
    protected int progress;
    /**
     * Creates new form LoadScreen
     */
    public LoadScreen() {
        setUndecorated(true);
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        initComponents();
        this.setLocation(200, 200);
        this.setResizable(false);
        ControlProgress();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        pane = new ProgressPane();
        
        pane.setSize(200, 50);
        pane.setLocation(new Point(20,40));
        pane.createBar();
        pane.paintComponent(this.getGraphics());
        
        add(pane);
        
          Timer timer = new Timer(50, new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
              progress += 1;
              if (progress >= 100) {
                  ((Timer) e.getSource()).stop();
                  hallo();
              }
          }
      });
          timer.start();
        timerbegin.start();
    }
    
    public void hallo () {
        Thread thread = new Thread () {
            @Override
            public void run() {
                Login alles = new Login();
                alles.setShowSettings(false);
                alles.start();
                alles.getSettings().setResolution(450, 500);
                alles.restart();
            }
        };
        thread.start();
        this.setVisible(false);
    }
    
    public ProgressPane getPane() {
        return pane;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addContainerGap(315, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** 
     * Synchronizes the progressbar with the label text.
     * Don't synchronize the method, because it causes an delayed implementation
     * of the loading screen elements.
     * @throws InterruptedException for wait block.
     */
    @SafeVarargs
    public void ControlProgress() {
       jLabel1.setFont(new Font("URW Chancery L", Font.PLAIN, 14));
       jLabel1.setText("Loading Void.");

       
       timermid = new javax.swing.Timer(1000, new ActionListener() {
          public void actionPerformed(ActionEvent e) {
              synchronized(e) {
                  while (jLabel1.getText().equals("Loading Void...")) {
                      try {
                          e.wait(200);
                          if (jLabel1.getText().equals("Loading Void...")) {
                              jLabel1.setText("Loading Void.");
                              timerbegin.start();
                          }
                      } catch (InterruptedException ex) {
                          ex.printStackTrace();
                      }
                  }
              }
          } 
       });
       
       timerend = new javax.swing.Timer(2000, new ActionListener() {
           public void actionPerformed(ActionEvent e) {
              synchronized(e) {
                  while (jLabel1.getText().equals("Loading Void..")) {
                      try {
                          e.wait(20);
                          if (jLabel1.getText().equals("Loading Void..")) {
                              jLabel1.setText("Loading Void...");
                              timermid.start();
                          
                          }
                      } catch(InterruptedException ex) {
                          ex.printStackTrace();
                      }
                  }
              }
          }
       });
       
       timerbegin = new javax.swing.Timer(2000,new ActionListener() {
           public void actionPerformed(ActionEvent e) {
                     synchronized(e) {
                            while (jLabel1.getText().equals("Loading Void.")) {
                                try {
                                    e.wait(20);
                                    if (jLabel1.getText().equals("Loading Void.")) {
                                        jLabel1.setText("Loading Void..");
                                    }
                                } catch(InterruptedException ex) {
                                    ex.printStackTrace();
                                }
                            }
                     }
           }
       });
       timerend.start();
       timerbegin.stop();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {      
          /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.put("ProgressBar.background", Color.white);
            UIManager.put("ProgressBar.foreground", Color.decode("#777777"));
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        final LoadScreen all = new LoadScreen();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                all.setVisible(true);
            }
        });
    }
    
    protected Login log;
    protected javax.swing.Timer timerbegin;
    protected javax.swing.Timer timerend;
    protected javax.swing.Timer timermid;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
